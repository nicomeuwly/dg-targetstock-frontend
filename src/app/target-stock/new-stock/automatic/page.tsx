"use client";
import ContentLayout from "@/components/contentLayout";
import NewStockProcess from "@/components/newStockProcess";
import ProductTile from "@/components/productTile";
import ToolBar from "@/components/toolBar";
import { useRouter } from "next/navigation";

import { useEffect, useState } from "react";

export default function AutomaticMethodPage() {
  const status: number[] = [2, 1, 0];
  const router = useRouter();
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [viewType, setViewType] = useState("thumb");

  const getProducts = async () => {
    try {
      const response = await fetch("/api/products");
      const data = await response.json();
      setProducts(data);
      setLoading(false);
    } catch (error: any) {
      console.error(error);
    }
  };

  function handleDataFromChild(data: string) {
    setViewType(data);
  }

  useEffect(() => {
    getProducts();
  }, []);

  return (
    <ContentLayout>
      {{
        title: "New stock",
        process: <NewStockProcess status={status} />,
        description: [
          "The product list will be generated by the system, which may take some time.",
          "Once the list is ready, you can consult it and modify it if necessary."
        ],
        button: { label: "Next", onClick: () => router.push("/target-stock/new-stock/summary"), disabled: loading },
        subtitle: "List of products",
        content: (
          <>
            <ToolBar isLoading={loading} totalProducts={products.length} sendDataToParent={handleDataFromChild} backButton={true}/>
            <div className={"flex " + (viewType === "thumb" ? "flex-row flex-wrap gap-y-4 mt-4" : "flex-col")}>
              {products.map((product, index) => (
                <ProductTile key={index} product={product} viewType={viewType} isFirst={index % 3 === 0} isLast={(index + 1) % 3 === 0} />
              ))}
            </div>
          </>
        )
      }}
    </ContentLayout>
  );
}
